mutate(x=factor(x, levels=x)) %>%   # This trick update the factor levels
ggplot( aes(x=x, y=predicted)) +
geom_line(aes(group = 1), col='#BBDF27FF') +
geom_ribbon(aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#BBDF27FF") +
labs( x = "Species") +
theme(axis.title.y = element_blank(),panel.grid.major.x = element_blank())
MART_covid <- mart_pred_COV %>%
arrange(desc(x)) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(x=factor(x, levels=x)) %>%   # This trick update the factor levels
ggplot( aes(x=x, y=predicted)) +
geom_line(aes(group = 1), col='#482576FF') +
geom_ribbon(aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#482576FF") +
labs( x = "Species") +
theme(axis.title.y = element_blank(),panel.grid.major.x = element_blank())
## libraries used in this script
## please add ALL LIBRARIES NEEDED HERE
## please remove libraries from the list that are not needed anymore
## at a later stage
#### load required libraries ####
package.list=c("sjPlot",
"tidyverse",
"reshape2",
"viridis")
for (package in package.list) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
## libraries used in this script
## please add ALL LIBRARIES NEEDED HERE
## please remove libraries from the list that are not needed anymore
## at a later stage
#### load required libraries ####
package.list=c("ggpubr",
"sjPlot",
"tidyverse",
"reshape2",
"viridis")
for (package in package.list) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
arr2 <- ggarrange(RAC_species, CAT_species, FOX_species, MART_species,
RAC_covid, CAT_covid, FOX_covid, MART_covid, legend.plot, ncol = 4,
nrow = 3)
FOX_species <- ggplot(fox_pred_SPE, aes(x = x, y = predicted, group = 1)) +
geom_linerange(aes(ymin = conf.low , ymax = conf.high, group = 1), col = "#BBDF27FF", alpha = 0.5)+
geom_point(col = "#BBDF27FF") +
labs( x = "Species") +
theme(axis.title.y = element_blank(),panel.grid.major.x = element_blank())
MART_species <- ggplot(mart_pred_SPE, aes(x = x, y = predicted, group = 1)) +
geom_linerange(aes(ymin = conf.low , ymax = conf.high, group = 1), col = "#482576FF", alpha = 0.5)+
geom_point(col = "#482576FF") +
labs( x = "Species") +
theme(axis.title.y = element_blank(),panel.grid.major.x = element_blank())
#covid
RAC_covid <- rac_pred_COV %>%
arrange(desc(x)) %>%    # First sort by covid This sort the dataframe but NOT the factor levels
mutate(x=factor(x, levels=x)) %>%   # This trick update the factor levels
ggplot( aes(x=x, y=predicted)) +
geom_line(aes(group = 1), col='#2D718EFF') +
geom_ribbon(aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#2D718EFF")+
labs(y="Waiting Time (h)", x = "Species") +
theme(panel.grid.major.x = element_blank())
CAT_covid <- cat_pred_COV %>%
arrange(desc(x)) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(x=factor(x, levels=x)) %>%   # This trick update the factor levels
ggplot( aes(x=x, y=predicted)) +
geom_line(aes(group = 1), col='#29AF7FFF') +
geom_ribbon(aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#29AF7FFF") +
labs( x = "Species") +
theme(axis.title.y = element_blank(),panel.grid.major.x = element_blank())
FOX_covid <- fox_pred_COV %>%
arrange(desc(x)) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(x=factor(x, levels=x)) %>%   # This trick update the factor levels
ggplot( aes(x=x, y=predicted)) +
geom_line(aes(group = 1), col='#BBDF27FF') +
geom_ribbon(aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#BBDF27FF") +
labs( x = "Species") +
theme(axis.title.y = element_blank(),panel.grid.major.x = element_blank())
MART_covid <- mart_pred_COV %>%
arrange(desc(x)) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(x=factor(x, levels=x)) %>%   # This trick update the factor levels
ggplot( aes(x=x, y=predicted)) +
geom_line(aes(group = 1), col='#482576FF') +
geom_ribbon(aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#482576FF") +
labs( x = "Species") +
theme(axis.title.y = element_blank(),panel.grid.major.x = element_blank())
arr2 <- ggarrange(RAC_species, CAT_species, FOX_species, MART_species,
RAC_covid, CAT_covid, FOX_covid, MART_covid, legend.plot, ncol = 4,
nrow = 3)
arr2
m_rac_12_covid <- readRDS(file = paste0(procdata_wd, "/m_rac_12_covid2021_05_11.RDS"))
m_cat_12_covid <- readRDS(file = paste0(procdata_wd, "/m_cat_12_covid2021_05_11.RDS"))
m_fox_12_covid <- readRDS(file = paste0(procdata_wd, "/m_fox_12_covid2021_05_11.RDS"))
m_mart_12_covid <- readRDS(file = paste0(procdata_wd, "/m_mart_12_covid2021_05_11.RDS"))
##raccoon
plot_rac <- plot_model(m_rac_12_covid, type = "pred", grid = T)
y_plot_rac <- plot_rac[[1]]
y_plot_rac_df <- data.frame(y_plot_rac)
rac_pred_LTC <- y_plot_rac_df %>% dplyr::filter(group_col == "Local_tree_cover")
rac_pred_FH <- y_plot_rac_df %>% dplyr::filter(group_col == "fence_height")
rac_pred_GS <- y_plot_rac_df %>% dplyr::filter(group_col == "garden_size")
rac_pred_IMP <- y_plot_rac_df %>% dplyr::filter(group_col == "imperv_100")
rac_pred_NOI <- y_plot_rac_df %>% dplyr::filter(group_col == "noise_100")
rac_pred_TC <- y_plot_rac_df %>% dplyr::filter(group_col == "tree_cover_100")
rac_pred_DB <- y_plot_rac_df %>% dplyr::filter(group_col == "distance_border")
rac_pred_SB <- y_plot_rac_df %>% dplyr::filter(group_col == "season_binary")
rac_pred_COV <- y_plot_rac_df %>% dplyr::filter(group_col == "covid")
rac_pred_COM <- y_plot_rac_df %>% dplyr::filter(group_col == "compost")
rac_pred_SPE <- y_plot_rac_df %>% dplyr::filter(group_col == "species")
#changing names
rac_pred_COM$x <- c("Closed", "none", "Open")
rac_pred_COV$x <- c("No Covid", "Covid")
rac_pred_SB$x <- c("Fall", "Spring")
rac_pred_SPE$x <- c("Raccoon", "Fox", "Cat",  "Marten")
#re-ordering
rac_pred_COM_ordered <- rac_pred_COM %>% arrange(x)
rac_pred_COV_ordered <- rac_pred_COV %>% arrange(desc(x))
rac_pred_SB_ordered <- rac_pred_SB %>% arrange(x)
rac_pred_SPE_ordered <- rac_pred_SPE %>% arrange(x)
##fox
plot_fox <- plot_model(m_fox_12_covid, type = "pred", grid = T)
y_plot_fox <- plot_fox[[1]]
y_plot_fox_df <- data.frame(y_plot_fox)
fox_pred_LTC <- y_plot_fox_df %>% dplyr::filter(group_col == "Local_tree_cover")
fox_pred_FH <- y_plot_fox_df %>% dplyr::filter(group_col == "fence_height")
fox_pred_GS <- y_plot_fox_df %>% dplyr::filter(group_col == "garden_size")
fox_pred_IMP <- y_plot_fox_df %>% dplyr::filter(group_col == "imperv_100")
fox_pred_NOI <- y_plot_fox_df %>% dplyr::filter(group_col == "noise_100")
fox_pred_TC <- y_plot_fox_df %>% dplyr::filter(group_col == "tree_cover_100")
fox_pred_DB <- y_plot_fox_df %>% dplyr::filter(group_col == "distance_border")
fox_pred_SB <- y_plot_fox_df %>% dplyr::filter(group_col == "season_binary")
fox_pred_COV <- y_plot_fox_df %>% dplyr::filter(group_col == "covid")
fox_pred_COM <- y_plot_fox_df %>% dplyr::filter(group_col == "compost")
fox_pred_SPE <- y_plot_fox_df %>% dplyr::filter(group_col == "species")
#changing names
fox_pred_COM$x <- c("Closed", "none", "Open")
fox_pred_COV$x <- c("No Covid", "Covid")
fox_pred_SB$x <- c("Fall", "Spring")
fox_pred_SPE$x <- c("Fox", "Cat", "Raccoon",  "Marten")
#re-ordering
fox_pred_COM_ordered <- fox_pred_COM %>% arrange(x)
fox_pred_COV_ordered <- fox_pred_COV %>% arrange(desc(x))
fox_pred_SB_ordered <- fox_pred_SB %>% arrange(x)
fox_pred_SPE_ordered <- fox_pred_SPE %>% arrange(x)
#cat
plot_cat <- plot_model(m_cat_12_covid, type = "pred", grid = T)
y_plot_cat <- plot_cat[[1]]
y_plot_cat_df <- data.frame(y_plot_cat)
cat_pred_LTC <- y_plot_cat_df %>% dplyr::filter(group_col == "Local_tree_cover")
cat_pred_FH <- y_plot_cat_df %>% dplyr::filter(group_col == "fence_height")
cat_pred_GS <- y_plot_cat_df %>% dplyr::filter(group_col == "garden_size")
cat_pred_IMP <- y_plot_cat_df %>% dplyr::filter(group_col == "imperv_100")
cat_pred_NOI <- y_plot_cat_df %>% dplyr::filter(group_col == "noise_100")
cat_pred_TC <- y_plot_cat_df %>% dplyr::filter(group_col == "tree_cover_100")
cat_pred_DB <- y_plot_cat_df %>% dplyr::filter(group_col == "distance_border")
cat_pred_SB <- y_plot_cat_df %>% dplyr::filter(group_col == "season_binary")
cat_pred_COV <- y_plot_cat_df %>% dplyr::filter(group_col == "covid")
cat_pred_COM <- y_plot_cat_df %>% dplyr::filter(group_col == "compost")
cat_pred_SPE <- y_plot_cat_df %>% dplyr::filter(group_col == "species")
#changing names
cat_pred_COM$x <- c("Closed", "none", "Open")
cat_pred_COV$x <- c("No Covid", "Covid")
cat_pred_SB$x <- c("Fall", "Spring")
cat_pred_SPE$x <- c( "Cat","Fox", "Raccoon", "Marten")
#re-ordering
cat_pred_COM_ordered <- cat_pred_COM %>% arrange(x)
cat_pred_COV_ordered <- cat_pred_COV %>% arrange(desc(x))
cat_pred_SB_ordered <- cat_pred_SB %>% arrange(x)
cat_pred_SPE_ordered <- cat_pred_SPE %>% arrange(x)
#marten
plot_mart <- plot_model(m_mart_12_covid, type = "pred", grid = T)
y_plot_mart <- plot_mart[[1]]
y_plot_mart_df <- data.frame(y_plot_mart)
mart_pred_LTC <- y_plot_mart_df %>% dplyr::filter(group_col == "Local_tree_cover")
mart_pred_FH <- y_plot_mart_df %>% dplyr::filter(group_col == "fence_height")
mart_pred_GS <- y_plot_mart_df %>% dplyr::filter(group_col == "garden_size")
mart_pred_IMP <- y_plot_mart_df %>% dplyr::filter(group_col == "imperv_100")
mart_pred_NOI <- y_plot_mart_df %>% dplyr::filter(group_col == "noise_100")
mart_pred_TC <- y_plot_mart_df %>% dplyr::filter(group_col == "tree_cover_100")
mart_pred_DB <- y_plot_mart_df %>% dplyr::filter(group_col == "distance_border")
mart_pred_SB <- y_plot_mart_df %>% dplyr::filter(group_col == "season_binary")
mart_pred_COV <- y_plot_mart_df %>% dplyr::filter(group_col == "covid")
mart_pred_COM <- y_plot_mart_df %>% dplyr::filter(group_col == "compost")
mart_pred_SPE <- y_plot_mart_df %>% dplyr::filter(group_col == "species")
#changing names
mart_pred_COM$x <- c("Closed", "none", "Open")
mart_pred_COV$x <- c("No Covid", "Covid")
mart_pred_SB$x <- c("Fall", "Spring")
mart_pred_SPE$x <- c("Marten", "Fox","Cat","Raccoon")
#re-ordering
mart_pred_COM_ordered <- mart_pred_COM %>% arrange(x)
mart_pred_COV_ordered <- mart_pred_COV %>% arrange(desc(x))
mart_pred_SB_ordered <- mart_pred_SB %>% arrange(x)
mart_pred_SPE_ordered <- mart_pred_SPE %>% arrange(x)
#fox raccoon, marten, cat
#c("#BBDF27FF", "#2D718EFF", "#482576FF", "#29AF7FFF")
LTC_pred <- ggplot(rac_pred_LTC, aes(x = x, y = predicted)) +
geom_line(col='#2D718EFF') +
geom_ribbon(aes(ymin = conf.low , ymax = conf.high), alpha = 0.1, fill = "#2D718EFF") +
geom_line(data = fox_pred_LTC, aes(x = x, y = predicted), col = "#BBDF27FF") +
geom_ribbon( data = fox_pred_LTC, aes(ymin = conf.low , ymax = conf.high), alpha = 0.1, fill = "#BBDF27FF") +
geom_line(data = cat_pred_LTC, aes(x = x, y = predicted), col = "#29AF7FFF") +
geom_ribbon( data = cat_pred_LTC, aes(ymin = conf.low , ymax = conf.high), alpha = 0.1, fill = "#29AF7FFF") +
geom_line(data = mart_pred_LTC, aes(x = x, y = predicted), col = "#482576FF") +
geom_ribbon( data = mart_pred_LTC, aes(ymin = conf.low , ymax = conf.high), alpha = 0.1, fill = "#482576FF") +
labs(y="Waiting Time (h)", x = "Local tree cover (%)")
FH_pred <- ggplot(rac_pred_FH, aes(x = x, y = predicted)) +
geom_line(col='#2D718EFF') +
geom_ribbon(aes(ymin = conf.low , ymax = conf.high), alpha = 0.1, fill = "#2D718EFF") +
geom_line(data = fox_pred_FH, aes(x = x, y = predicted), col = "#BBDF27FF") +
geom_ribbon( data = fox_pred_FH, aes(ymin = conf.low , ymax = conf.high), alpha = 0.1, fill = "#BBDF27FF") +
geom_line(data = cat_pred_FH, aes(x = x, y = predicted), col = "#29AF7FFF") +
geom_ribbon( data = cat_pred_FH, aes(ymin = conf.low , ymax = conf.high), alpha = 0.1, fill = "#29AF7FFF") +
geom_line(data = mart_pred_FH, aes(x = x, y = predicted), col = "#482576FF") +
geom_ribbon( data = mart_pred_FH, aes(ymin = conf.low , ymax = conf.high), alpha = 0.1, fill = "#482576FF") +
labs(y="Waiting Time (h)", x = "Fence height (m)")
GS_pred <- ggplot(rac_pred_GS, aes(x = x, y = predicted)) +
geom_line(col='#2D718EFF') +
geom_ribbon(aes(ymin = conf.low , ymax = conf.high), alpha = 0.1, fill = "#2D718EFF") +
geom_line(data = fox_pred_GS, aes(x = x, y = predicted), col = "#BBDF27FF") +
geom_ribbon( data = fox_pred_GS, aes(ymin = conf.low , ymax = conf.high), alpha = 0.1, fill = "#BBDF27FF") +
geom_line(data = cat_pred_GS, aes(x = x, y = predicted), col = "#29AF7FFF") +
geom_ribbon( data = cat_pred_GS, aes(ymin = conf.low , ymax = conf.high), alpha = 0.1, fill = "#29AF7FFF") +
geom_line(data = mart_pred_GS, aes(x = x, y = predicted), col = "#482576FF") +
geom_ribbon( data = mart_pred_GS, aes(ymin = conf.low , ymax = conf.high), alpha = 0.1, fill = "#482576FF") +
labs(y="Waiting Time (h)", x = "Garden size (m2)")
IMP_pred <- ggplot(rac_pred_IMP, aes(x = x, y = predicted)) +
geom_line(col='#2D718EFF') +
geom_ribbon(aes(ymin = conf.low , ymax = conf.high), alpha = 0.1, fill = "#2D718EFF") +
geom_line(data = fox_pred_IMP, aes(x = x, y = predicted), col = "#BBDF27FF") +
geom_ribbon( data = fox_pred_IMP, aes(ymin = conf.low , ymax = conf.high), alpha = 0.1, fill = "#BBDF27FF") +
geom_line(data = cat_pred_IMP, aes(x = x, y = predicted), col = "#29AF7FFF") +
geom_ribbon( data = cat_pred_IMP, aes(ymin = conf.low , ymax = conf.high), alpha = 0.1, fill = "#29AF7FFF") +
geom_line(data = mart_pred_IMP, aes(x = x, y = predicted), col = "#482576FF") +
geom_ribbon( data = mart_pred_IMP, aes(ymin = conf.low , ymax = conf.high), alpha = 0.1, fill = "#482576FF") +
labs(y="Waiting Time (h)", x = "Imperviousness (%)")
NOI_pred <- ggplot(rac_pred_NOI, aes(x = x, y = predicted)) +
geom_line(col='#2D718EFF') +
geom_ribbon(aes(ymin = conf.low , ymax = conf.high), alpha = 0.1, fill = "#2D718EFF") +
geom_line(data = fox_pred_NOI, aes(x = x, y = predicted), col = "#BBDF27FF") +
geom_ribbon( data = fox_pred_NOI, aes(ymin = conf.low , ymax = conf.high), alpha = 0.1, fill = "#BBDF27FF") +
geom_line(data = cat_pred_NOI, aes(x = x, y = predicted), col = "#29AF7FFF") +
geom_ribbon( data = cat_pred_NOI, aes(ymin = conf.low , ymax = conf.high), alpha = 0.1, fill = "#29AF7FFF") +
geom_line(data = mart_pred_NOI, aes(x = x, y = predicted), col = "#482576FF") +
geom_ribbon( data = mart_pred_NOI, aes(ymin = conf.low , ymax = conf.high), alpha = 0.1, fill = "#482576FF") +
labs(y="Waiting Time (h)", x = "Noise pollution (dB)")
TC_pred <- ggplot(rac_pred_TC, aes(x = x, y = predicted)) +
geom_line(col='#2D718EFF') +
geom_ribbon(aes(ymin = conf.low , ymax = conf.high), alpha = 0.1, fill = "#2D718EFF") +
geom_line(data = fox_pred_TC, aes(x = x, y = predicted), col = "#BBDF27FF") +
geom_ribbon( data = fox_pred_TC, aes(ymin = conf.low , ymax = conf.high), alpha = 0.1, fill = "#BBDF27FF") +
geom_line(data = cat_pred_TC, aes(x = x, y = predicted), col = "#29AF7FFF") +
geom_ribbon( data = cat_pred_TC, aes(ymin = conf.low , ymax = conf.high), alpha = 0.1, fill = "#29AF7FFF") +
geom_line(data = mart_pred_TC, aes(x = x, y = predicted), col = "#482576FF") +
geom_ribbon( data = mart_pred_TC, aes(ymin = conf.low , ymax = conf.high), alpha = 0.1, fill = "#482576FF") +
labs(y="Waiting Time (h)", x = "Tree cover (%)")
DB_pred <- ggplot(rac_pred_DB, aes(x = x, y = predicted)) +
geom_line(col='#2D718EFF') +
geom_ribbon(aes(ymin = conf.low , ymax = conf.high), alpha = 0.1, fill = "#2D718EFF") +
geom_line(data = fox_pred_DB, aes(x = x, y = predicted), col = "#BBDF27FF") +
geom_ribbon( data = fox_pred_DB, aes(ymin = conf.low , ymax = conf.high), alpha = 0.1, fill = "#BBDF27FF") +
geom_line(data = cat_pred_DB, aes(x = x, y = predicted), col = "#29AF7FFF") +
geom_ribbon( data = cat_pred_DB, aes(ymin = conf.low , ymax = conf.high), alpha = 0.1, fill = "#29AF7FFF") +
geom_line(data = mart_pred_DB, aes(x = x, y = predicted), col = "#482576FF") +
geom_ribbon( data = mart_pred_DB, aes(ymin = conf.low , ymax = conf.high), alpha = 0.1, fill = "#482576FF") +
labs(y="Waiting Time (h)", x = "Distance to border (km)")
SB_pred <- ggplot(rac_pred_SB, aes(x = x, y = predicted, group = 1)) +
geom_line(aes(group = 1), col='#2D718EFF') +
geom_ribbon(aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#2D718EFF") +
geom_line(data = fox_pred_SB, aes(x = x, y = predicted, group = 1), col = "#BBDF27FF") +
geom_ribbon( data = fox_pred_SB, aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#BBDF27FF") +
geom_line(data = cat_pred_SB, aes(x = x, y = predicted, group = 1), col = "#29AF7FFF") +
geom_ribbon( data = cat_pred_SB, aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#29AF7FFF") +
geom_line(data = mart_pred_SB, aes(x = x, y = predicted, group = 1), col = "#482576FF") +
geom_ribbon( data = mart_pred_SB, aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#482576FF") +
labs(y="Waiting Time (h)", x = "Season")
COV_pred <- rac_pred_COV %>%
arrange(desc(x)) %>%    # First sort by covid This sort the dataframe but NOT the factor levels
mutate(x=factor(x, levels=x)) %>%   # This trick update the factor levels
ggplot( aes(x=x, y=predicted)) +
geom_line(aes(group = 1), col='#2D718EFF') +
geom_ribbon(aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#2D718EFF") +
geom_line(data = fox_pred_COV, aes(x = x, y = predicted, group = 1), col = "#BBDF27FF") +
geom_ribbon( data = fox_pred_COV, aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#BBDF27FF") +
geom_line(data = cat_pred_COV, aes(x = x, y = predicted, group = 1), col = "#29AF7FFF") +
geom_ribbon( data = cat_pred_COV, aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#29AF7FFF") +
geom_line(data = mart_pred_COV, aes(x = x, y = predicted, group = 1), col = "#482576FF") +
geom_ribbon( data = mart_pred_COV, aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#482576FF") +
labs(y="Waiting Time (h)", x = "Lockdown measure")
COM_pred <- ggplot(rac_pred_COM, aes(x = x, y = predicted, group = 1)) +
geom_line(aes(group = 1), col='#2D718EFF') +
geom_ribbon(aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#2D718EFF") +
geom_line(data = fox_pred_COM, aes(x = x, y = predicted, group = 1), col = "#BBDF27FF") +
geom_ribbon( data = fox_pred_COM, aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#BBDF27FF") +
geom_line(data = cat_pred_COM, aes(x = x, y = predicted, group = 1), col = "#29AF7FFF") +
geom_ribbon( data = cat_pred_COM, aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#29AF7FFF") +
geom_line(data = mart_pred_COM, aes(x = x, y = predicted, group = 1), col = "#482576FF") +
geom_ribbon( data = mart_pred_COM, aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#482576FF") +
labs(y="Waiting Time (h)", x = "Compost")
SPE_pred <- ggplot(rac_pred_SPE, aes(x = x, y = predicted, group = 1)) +
geom_line(aes(group = 1), col='#2D718EFF') +
geom_ribbon(aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#2D718EFF") +
geom_line(data = fox_pred_SPE, aes(x = x, y = predicted, group = 1 ), col = "#BBDF27FF") +
geom_ribbon(data = fox_pred_SPE, aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#BBDF27FF") +
geom_line(data = cat_pred_SPE, aes(x = x, y = predicted, group = 1 ), col = "#29AF7FFF") +
geom_ribbon( data = cat_pred_SPE, aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#29AF7FFF") +
geom_line(data = mart_pred_SPE, aes(x = x, y = predicted,group = 1 ), col = "#482576FF", group = 1) +
geom_ribbon( data = mart_pred_SPE, aes(ymin = conf.low , ymax = conf.high,group = 1), alpha = 0.1, fill = "#482576FF") +
labs(y="Waiting Time (h)", x = "Species")
#creating a dataframe for the legend plot
df.species <- data.frame(species = c("Fox", "Marten", "Raccoon", "Cat"),
x = c(15,15,15,15),
y = c(20,20,20,20))
legend.plot <- ggplot(df.species, aes(x = x, y = y, color = species))+
geom_line() +
scale_color_manual( values = c("#29AF7FFF","#BBDF27FF", "#482576FF",  "#2D718EFF"))+
lims(x = c(0,0), y = c(0,0))+
theme_void() +
theme(legend.position = c(0.5,0.5),
legend.key.size = unit(1, "cm"),
legend.text = element_text(size =  12),
legend.title = element_text(size = 15, face = "bold"))
#fox raccoon, marten, cat
#c("#BBDF27FF", "#2D718EFF", "#482576FF", "#29AF7FFF")
arr <- ggarrange(LTC_pred,FH_pred,GS_pred, IMP_pred, NOI_pred, TC_pred, DB_pred, SB_pred, COV_pred, SPE_pred, legend.plot)
#presenting in a different way because the previous one is messy
RAC_species <- ggplot(rac_pred_SPE, aes(x = x, y = predicted, group = 1)) +
geom_linerange(aes(ymin = conf.low , ymax = conf.high, group = 1), col = "#2D718EFF", alpha = 0.5)+
geom_point(col = "#2D718EFF") +
labs(y="Time of delay (h)", x = "Species") +
theme(panel.grid.major.x = element_blank())
CAT_species <- ggplot(cat_pred_SPE, aes(x = x, y = predicted, group = 1)) +
geom_linerange(aes(ymin = conf.low , ymax = conf.high, group = 1), col = "#29AF7FFF", alpha = 0.5)+
geom_point(col = "#29AF7FFF") +
labs( x = "Species") +
theme(axis.title.y = element_blank(),panel.grid.major.x = element_blank())
FOX_species <- ggplot(fox_pred_SPE, aes(x = x, y = predicted, group = 1)) +
geom_linerange(aes(ymin = conf.low , ymax = conf.high, group = 1), col = "#BBDF27FF", alpha = 0.5)+
geom_point(col = "#BBDF27FF") +
labs( x = "Species") +
theme(axis.title.y = element_blank(),panel.grid.major.x = element_blank())
MART_species <- ggplot(mart_pred_SPE, aes(x = x, y = predicted, group = 1)) +
geom_linerange(aes(ymin = conf.low , ymax = conf.high, group = 1), col = "#482576FF", alpha = 0.5)+
geom_point(col = "#482576FF") +
labs( x = "Species") +
theme(axis.title.y = element_blank(),panel.grid.major.x = element_blank())
#covid
RAC_covid <- rac_pred_COV %>%
arrange(desc(x)) %>%    # First sort by covid This sort the dataframe but NOT the factor levels
mutate(x=factor(x, levels=x)) %>%   # This trick update the factor levels
ggplot( aes(x=x, y=predicted)) +
geom_line(aes(group = 1), col='#2D718EFF') +
geom_ribbon(aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#2D718EFF")+
labs(y="Tie of delay (h)", x = "Species") +
theme(panel.grid.major.x = element_blank())
CAT_covid <- cat_pred_COV %>%
arrange(desc(x)) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(x=factor(x, levels=x)) %>%   # This trick update the factor levels
ggplot( aes(x=x, y=predicted)) +
geom_line(aes(group = 1), col='#29AF7FFF') +
geom_ribbon(aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#29AF7FFF") +
labs( x = "Species") +
theme(axis.title.y = element_blank(),panel.grid.major.x = element_blank())
FOX_covid <- fox_pred_COV %>%
arrange(desc(x)) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(x=factor(x, levels=x)) %>%   # This trick update the factor levels
ggplot( aes(x=x, y=predicted)) +
geom_line(aes(group = 1), col='#BBDF27FF') +
geom_ribbon(aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#BBDF27FF") +
labs( x = "Species") +
theme(axis.title.y = element_blank(),panel.grid.major.x = element_blank())
MART_covid <- mart_pred_COV %>%
arrange(desc(x)) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(x=factor(x, levels=x)) %>%   # This trick update the factor levels
ggplot( aes(x=x, y=predicted)) +
geom_line(aes(group = 1), col='#482576FF') +
geom_ribbon(aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#482576FF") +
labs( x = "Species") +
theme(axis.title.y = element_blank(),panel.grid.major.x = element_blank())
arr2 <- ggarrange(RAC_species, CAT_species, FOX_species, MART_species,
RAC_covid, CAT_covid, FOX_covid, MART_covid, legend.plot, ncol = 4,
nrow = 3)
#ggsave(plot = arr, paste0(plots_wd, "/predictedValues_urbanMesocarn_WTImpakt_DE_covidSeasonBinaryAllGardens_CovidOrder", gsub("-", "_", Sys.Date()),".png"), height=8, width=9, units='in', dpi=600)
#ggsave(plot = arr2, paste0(plots_wd, "/predictedValues_urbanMesocarn_WTImpakt_DE_covidSeasonBinaryAllGardens_SpeciesCovidEffect_CovidOrder", gsub("-", "_", Sys.Date()),".png"), height=8, width=10, units='in', dpi=600)
arr2
ggsave(plot = arr2, paste0(plots_wd, "/predictedValues_urbanMesocarn_WTImpakt_DE_covidSeasonBinaryAllGardens_SpeciesCovidEffect_CovidOrder", gsub("-", "_", Sys.Date()),".png"), height=8, width=10, units='in', dpi=600)
#covid
RAC_covid <- rac_pred_COV %>%
arrange(desc(x)) %>%    # First sort by covid This sort the dataframe but NOT the factor levels
mutate(x=factor(x, levels=x)) %>%   # This trick update the factor levels
ggplot( aes(x=x, y=predicted)) +
geom_line(aes(group = 1), col='#2D718EFF') +
geom_ribbon(aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#2D718EFF")+
labs(y="Time of delay (h)", x = "Species") +
theme(panel.grid.major.x = element_blank())
CAT_covid <- cat_pred_COV %>%
arrange(desc(x)) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(x=factor(x, levels=x)) %>%   # This trick update the factor levels
ggplot( aes(x=x, y=predicted)) +
geom_line(aes(group = 1), col='#29AF7FFF') +
geom_ribbon(aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#29AF7FFF") +
labs( x = "Species") +
theme(axis.title.y = element_blank(),panel.grid.major.x = element_blank())
FOX_covid <- fox_pred_COV %>%
arrange(desc(x)) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(x=factor(x, levels=x)) %>%   # This trick update the factor levels
ggplot( aes(x=x, y=predicted)) +
geom_line(aes(group = 1), col='#BBDF27FF') +
geom_ribbon(aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#BBDF27FF") +
labs( x = "Species") +
theme(axis.title.y = element_blank(),panel.grid.major.x = element_blank())
MART_covid <- mart_pred_COV %>%
arrange(desc(x)) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(x=factor(x, levels=x)) %>%   # This trick update the factor levels
ggplot( aes(x=x, y=predicted)) +
geom_line(aes(group = 1), col='#482576FF') +
geom_ribbon(aes(ymin = conf.low , ymax = conf.high, group = 1), alpha = 0.1, fill = "#482576FF") +
labs( x = "Species") +
theme(axis.title.y = element_blank(),panel.grid.major.x = element_blank())
arr2 <- ggarrange(RAC_species, CAT_species, FOX_species, MART_species,
RAC_covid, CAT_covid, FOX_covid, MART_covid, legend.plot, ncol = 4,
nrow = 3)
ggsave(plot = arr, paste0(plots_wd, "/predictedValues_urbanMesocarn_WTImpakt_DE_covidSeasonBinaryAllGardens_CovidOrder", gsub("-", "_", Sys.Date()),".png"), height=8, width=9, units='in', dpi=600)
ggsave(plot = arr2, paste0(plots_wd, "/predictedValues_urbanMesocarn_WTImpakt_DE_covidSeasonBinaryAllGardens_SpeciesCovidEffect_CovidOrder", gsub("-", "_", Sys.Date()),".png"), height=8, width=10, units='in', dpi=600)
rac_pred_SPE
## You can ignore this chunk in most cases
## If you want to modify chunk options, you can do it here for all chunks or
## add the options in the repsective chunk header, e.g. `{r, message = FALSE}`
knitr::opts_chunk$set(echo = TRUE, warning = TRUE, message = TRUE,
fig.width = 9, fig.height = 6, dpi = 500,
retina = 1, fig.showtext = TRUE)
## for non-CRAN packages please keep install instruction
## but commented so it is not run each time, e.g.
# devtools::install_github("EcoDynIZW/template")
## libraries used in this script
## please add ALL LIBRARIES NEEDED HERE
## please remove libraries from the list that are not needed anymore
## at a later stage
#### load required libraries ####
package.list=c("camtrapR",
"dplyr",
"evaluate",
"gdata",
"here",
"janitor",
"maptools",
"optimbase",
"plyr",
"raster",
"readxl",
"rgdal",
"rgeos",
"rjags",
"rlecuyer",
"showtext",
"sf",
"snowfall",
"sp",
"stringr",
"tidyverse"
)
for (package in package.list) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
## for non-CRAN packages please keep install instruction
## but commented so it is not run each time, e.g.
# devtools::install_github("EcoDynIZW/template")
## libraries used in this script
## please add ALL LIBRARIES NEEDED HERE
## please remove libraries from the list that are not needed anymore
## at a later stage
#### load required libraries ####
package.list=c("camtrapR",
"dplyr",
"evaluate",
"gdata",
"here",
"janitor",
"maptools",
"optimbase",
"plyr",
"raster",
"readxl",
#"rgdal",
#"rgeos",
#"rjags",
"rlecuyer",
"showtext",
#"sf",
"snowfall",
#"sp",
"stringr",
"tidyverse"
)
for (package in package.list) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
WorkDir <- here::here()
procdata_wd <- file.path(WorkDir, "output/data-proc/temporal_processed_data")
plots_wd <- file.path(WorkDir, "plots/temp")
WorkDir
